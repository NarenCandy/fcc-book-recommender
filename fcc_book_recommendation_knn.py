# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-book-recommendation-engine/blob/master/fcc_book_recommendation_knn.ipynb
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

ll

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

print(df_ratings.shape)
print(df_ratings.head(10))
print(df_ratings['rating'].value_counts())

user_ratings = df_ratings.groupby('user', as_index = False)['rating'].count().rename(columns = { 'rating':'usercount'})
book_ratings = df_ratings.groupby('isbn', as_index = False)['rating'].count().rename(columns = {'rating':'titlecount'})
df_ratings = pd.merge(left = df_ratings, right = user_ratings, on = 'user')
df_ratings = pd.merge(left = df_ratings, right = book_ratings, on = 'isbn')

df = df_ratings.loc[(df_ratings['usercount'] >= 200) & (df_ratings['titlecount'] >= 100)]
df = df.drop(['usercount', 'titlecount'], axis = 1)
df = pd.merge(left = df, right = df_books, on = 'isbn')

df = pd.merge(df_ratings, df_books, on='isbn')
print("Merged shape:", df.shape)
print(df[['title', 'user', 'rating']].head())

df = df.drop_duplicates(['user', 'title'])
df_pivot = pd.pivot(df, values = 'rating', index = 'title', columns = 'user' )
df_pivot = df_pivot.fillna(0)

import scipy as spy
df_matrix = spy.sparse.csr_matrix(df_pivot.values)

model = NearestNeighbors(algorithm = 'brute', metric = 'cosine')
model.fit(df_matrix)

# function to return recommended books - this will be tested
def get_recommends(book = ""):
  x = df_pivot[df_pivot.index == book]
  dist, ind = model.kneighbors(x, n_neighbors = 6)
  recommended_books = []
  reco_books = []
  dist = dist.flatten()
  ind = ind.flatten()
  for i in range(len(ind)):
      if i == 0:
        recommended_books.append(df_pivot.index[ind[i]])
      else:
        reco_book = df_pivot.index[ind[i]]
        reco_dist = dist[i]
        reco_books.append([reco_book, reco_dist])
  #reversing the list order because according to forums, the test function has a bug
  reco_books = reco_books[::-1]
  recommended_books.append(reco_books)



  return recommended_books

print(get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))"))

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()